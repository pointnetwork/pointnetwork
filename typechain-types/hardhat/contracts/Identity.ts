/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace Identity {
  export type PubKey64Struct = { part1: BytesLike; part2: BytesLike };

  export type PubKey64StructOutput = [string, string] & {
    part1: string;
    part2: string;
  };
}

export interface IdentityInterface extends utils.Interface {
  functions: {
    "MAX_HANDLE_LENGTH()": FunctionFragment;
    "canonical(string)": FunctionFragment;
    "finishMigrations()": FunctionFragment;
    "getCommPublicKeyByIdentity(string)": FunctionFragment;
    "getIdentityByOwner(address)": FunctionFragment;
    "getOwnerByIdentity(string)": FunctionFragment;
    "identityList(uint256)": FunctionFragment;
    "identityToCommPublicKey(string)": FunctionFragment;
    "identityToOwner(string)": FunctionFragment;
    "ikv(string,string)": FunctionFragment;
    "ikvGet(string,string)": FunctionFragment;
    "ikvImportKV(string,string,string,string)": FunctionFragment;
    "ikvList(string,uint256)": FunctionFragment;
    "ikvPut(string,string,string,string)": FunctionFragment;
    "initialize()": FunctionFragment;
    "lowercaseToCanonicalIdentities(string)": FunctionFragment;
    "migrationApplied()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerToIdentity(address)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "register(string,address,bytes32,bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferIdentityOwnership(string,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_HANDLE_LENGTH"
      | "canonical"
      | "finishMigrations"
      | "getCommPublicKeyByIdentity"
      | "getIdentityByOwner"
      | "getOwnerByIdentity"
      | "identityList"
      | "identityToCommPublicKey"
      | "identityToOwner"
      | "ikv"
      | "ikvGet"
      | "ikvImportKV"
      | "ikvList"
      | "ikvPut"
      | "initialize"
      | "lowercaseToCanonicalIdentities"
      | "migrationApplied"
      | "owner"
      | "ownerToIdentity"
      | "proxiableUUID"
      | "register"
      | "renounceOwnership"
      | "transferIdentityOwnership"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_HANDLE_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "canonical", values: [string]): string;
  encodeFunctionData(
    functionFragment: "finishMigrations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCommPublicKeyByIdentity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getIdentityByOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerByIdentity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "identityList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "identityToCommPublicKey",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "identityToOwner",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "ikv", values: [string, string]): string;
  encodeFunctionData(
    functionFragment: "ikvGet",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ikvImportKV",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ikvList",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ikvPut",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lowercaseToCanonicalIdentities",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "migrationApplied",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerToIdentity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [string, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferIdentityOwnership",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_HANDLE_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canonical", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finishMigrations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommPublicKeyByIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdentityByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerByIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "identityList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "identityToCommPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "identityToOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ikv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ikvGet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ikvImportKV",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ikvList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ikvPut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lowercaseToCanonicalIdentities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrationApplied",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerToIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferIdentityOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "IKVSet(string,string,string,string)": EventFragment;
    "IdentityOwnershipTransferred(string,address,address,uint256)": EventFragment;
    "IdentityRegistered(string,address,tuple)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IKVSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "IdentityOwnershipTransferred"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IdentityRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface IKVSetEventObject {
  identity: string;
  key: string;
  value: string;
  version: string;
}
export type IKVSetEvent = TypedEvent<
  [string, string, string, string],
  IKVSetEventObject
>;

export type IKVSetEventFilter = TypedEventFilter<IKVSetEvent>;

export interface IdentityOwnershipTransferredEventObject {
  handle: string;
  oldOwner: string;
  newOwner: string;
  date: BigNumber;
}
export type IdentityOwnershipTransferredEvent = TypedEvent<
  [string, string, string, BigNumber],
  IdentityOwnershipTransferredEventObject
>;

export type IdentityOwnershipTransferredEventFilter =
  TypedEventFilter<IdentityOwnershipTransferredEvent>;

export interface IdentityRegisteredEventObject {
  handle: string;
  identityOwner: string;
  commPublicKey: Identity.PubKey64StructOutput;
}
export type IdentityRegisteredEvent = TypedEvent<
  [string, string, Identity.PubKey64StructOutput],
  IdentityRegisteredEventObject
>;

export type IdentityRegisteredEventFilter =
  TypedEventFilter<IdentityRegisteredEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Identity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IdentityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_HANDLE_LENGTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    canonical(
      anyCase: string,
      overrides?: CallOverrides
    ): Promise<[string] & { canonicalCase: string }>;

    finishMigrations(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCommPublicKeyByIdentity(
      identity: string,
      overrides?: CallOverrides
    ): Promise<
      [Identity.PubKey64StructOutput] & {
        commPublicKey: Identity.PubKey64StructOutput;
      }
    >;

    getIdentityByOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[string] & { identity: string }>;

    getOwnerByIdentity(
      identity: string,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    identityList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    identityToCommPublicKey(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { part1: string; part2: string }>;

    identityToOwner(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    ikv(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ikvGet(
      identity: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<[string] & { value: string }>;

    ikvImportKV(
      identity: string,
      key: string,
      value: string,
      version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ikvList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ikvPut(
      identity: string,
      key: string,
      value: string,
      version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lowercaseToCanonicalIdentities(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    migrationApplied(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerToIdentity(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    register(
      handle: string,
      identityOwner: string,
      commPublicKeyPart1: BytesLike,
      commPublicKeyPart2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferIdentityOwnership(
      handle: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_HANDLE_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

  canonical(anyCase: string, overrides?: CallOverrides): Promise<string>;

  finishMigrations(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCommPublicKeyByIdentity(
    identity: string,
    overrides?: CallOverrides
  ): Promise<Identity.PubKey64StructOutput>;

  getIdentityByOwner(owner: string, overrides?: CallOverrides): Promise<string>;

  getOwnerByIdentity(
    identity: string,
    overrides?: CallOverrides
  ): Promise<string>;

  identityList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  identityToCommPublicKey(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[string, string] & { part1: string; part2: string }>;

  identityToOwner(arg0: string, overrides?: CallOverrides): Promise<string>;

  ikv(arg0: string, arg1: string, overrides?: CallOverrides): Promise<string>;

  ikvGet(
    identity: string,
    key: string,
    overrides?: CallOverrides
  ): Promise<string>;

  ikvImportKV(
    identity: string,
    key: string,
    value: string,
    version: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ikvList(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  ikvPut(
    identity: string,
    key: string,
    value: string,
    version: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lowercaseToCanonicalIdentities(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  migrationApplied(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerToIdentity(arg0: string, overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  register(
    handle: string,
    identityOwner: string,
    commPublicKeyPart1: BytesLike,
    commPublicKeyPart2: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferIdentityOwnership(
    handle: string,
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_HANDLE_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    canonical(anyCase: string, overrides?: CallOverrides): Promise<string>;

    finishMigrations(overrides?: CallOverrides): Promise<void>;

    getCommPublicKeyByIdentity(
      identity: string,
      overrides?: CallOverrides
    ): Promise<Identity.PubKey64StructOutput>;

    getIdentityByOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getOwnerByIdentity(
      identity: string,
      overrides?: CallOverrides
    ): Promise<string>;

    identityList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    identityToCommPublicKey(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { part1: string; part2: string }>;

    identityToOwner(arg0: string, overrides?: CallOverrides): Promise<string>;

    ikv(arg0: string, arg1: string, overrides?: CallOverrides): Promise<string>;

    ikvGet(
      identity: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<string>;

    ikvImportKV(
      identity: string,
      key: string,
      value: string,
      version: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ikvList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    ikvPut(
      identity: string,
      key: string,
      value: string,
      version: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(overrides?: CallOverrides): Promise<void>;

    lowercaseToCanonicalIdentities(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    migrationApplied(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerToIdentity(arg0: string, overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    register(
      handle: string,
      identityOwner: string,
      commPublicKeyPart1: BytesLike,
      commPublicKeyPart2: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferIdentityOwnership(
      handle: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "IKVSet(string,string,string,string)"(
      identity?: null,
      key?: null,
      value?: null,
      version?: null
    ): IKVSetEventFilter;
    IKVSet(
      identity?: null,
      key?: null,
      value?: null,
      version?: null
    ): IKVSetEventFilter;

    "IdentityOwnershipTransferred(string,address,address,uint256)"(
      handle?: string | null,
      oldOwner?: string | null,
      newOwner?: string | null,
      date?: null
    ): IdentityOwnershipTransferredEventFilter;
    IdentityOwnershipTransferred(
      handle?: string | null,
      oldOwner?: string | null,
      newOwner?: string | null,
      date?: null
    ): IdentityOwnershipTransferredEventFilter;

    "IdentityRegistered(string,address,tuple)"(
      handle?: null,
      identityOwner?: null,
      commPublicKey?: null
    ): IdentityRegisteredEventFilter;
    IdentityRegistered(
      handle?: null,
      identityOwner?: null,
      commPublicKey?: null
    ): IdentityRegisteredEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    MAX_HANDLE_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    canonical(anyCase: string, overrides?: CallOverrides): Promise<BigNumber>;

    finishMigrations(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCommPublicKeyByIdentity(
      identity: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIdentityByOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnerByIdentity(
      identity: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    identityList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    identityToCommPublicKey(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    identityToOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ikv(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ikvGet(
      identity: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ikvImportKV(
      identity: string,
      key: string,
      value: string,
      version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ikvList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ikvPut(
      identity: string,
      key: string,
      value: string,
      version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lowercaseToCanonicalIdentities(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrationApplied(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerToIdentity(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      handle: string,
      identityOwner: string,
      commPublicKeyPart1: BytesLike,
      commPublicKeyPart2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferIdentityOwnership(
      handle: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_HANDLE_LENGTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canonical(
      anyCase: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finishMigrations(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCommPublicKeyByIdentity(
      identity: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIdentityByOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnerByIdentity(
      identity: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    identityList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    identityToCommPublicKey(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    identityToOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ikv(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ikvGet(
      identity: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ikvImportKV(
      identity: string,
      key: string,
      value: string,
      version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ikvList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ikvPut(
      identity: string,
      key: string,
      value: string,
      version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lowercaseToCanonicalIdentities(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrationApplied(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerToIdentity(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    register(
      handle: string,
      identityOwner: string,
      commPublicKeyPart1: BytesLike,
      commPublicKeyPart2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferIdentityOwnership(
      handle: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
