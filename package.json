{
  "name": "pointnetwork",
  "version": "1.99.21",
  "description": "Point Network",
  "main": "point",
  "bin": "dist/index.js",
  "engines": {
    "node": ">=14.0.0",
    "npm": ">=6.0.0"
  },
  "dependencies": {
    "@bonfida/spl-name-service": "^0.1.43",
    "@braintree/sanitize-url": "^6.0.0",
    "@chainsafe/libp2p-gossipsub": "^6.2.0",
    "@chainsafe/libp2p-noise": "^11.0.1",
    "@elastic/ecs-pino-format": "^1.3.0",
    "@ensdomains/eth-ens-namehash": "^2.0.15",
    "@fastify/formbody": "^6.0.0",
    "@fastify/multipart": "^6.0.0",
    "@fastify/url-data": "^4.0.0",
    "@libp2p/mplex": "^7.1.1",
    "@libp2p/tcp": "^6.1.2",
    "@nomiclabs/hardhat-ethers": "^2.0.5",
    "@openzeppelin/contracts": "^4.8.2",
    "@openzeppelin/contracts-upgradeable": "^4.5.2",
    "@openzeppelin/hardhat-upgrades": "^1.21.0",
    "@solana/web3.js": "^1.41.3",
    "@truffle/hdwallet-provider": "^1.5.0",
    "@typechain/ethers-v5": "^10.0.0",
    "@typechain/hardhat": "^6.0.0",
    "abi-decoder": "^2.4.0",
    "ansi-colors": "^4.1.3",
    "arweave": "^1.11.4",
    "arweave-mnemonic-keys": "^0.0.9",
    "async": "^3.2.3",
    "axios": "^0.27.2",
    "bip32": "^2.0.6",
    "bip39": "^3.0.4",
    "bn.js": "^5.2.0",
    "cli-progress": "^3.11.2",
    "commander": "^8.1.0",
    "config": "^3.3.7",
    "detect-content-type": "^1.2.0",
    "dockerode": "^3.3.1",
    "eccrypto": "^1.1.6",
    "ed25519-hd-key": "^1.3.0",
    "ethereumjs-util": "^7.1.0",
    "ethereumjs-wallet": "^1.0.2",
    "fastify": "^3.20.2",
    "fastify-http-proxy": "^6.2.1",
    "fastify-websocket": "^3.2.1",
    "file-type": "^18.2.1",
    "form-data": "^4.0.0",
    "fs-extra": "^10.0.1",
    "graphql": "^16.2.0",
    "graphql-request": "^4.0.0",
    "gunzip-maybe": "^1.4.2",
    "handlebars": "^4.7.7",
    "hardhat": "^2.9.1",
    "html-entities": "^2.3.2",
    "ipfs": "^0.66.0",
    "ipfs-core": "^0.18.0",
    "ipfs-http-client": "^50.1.2",
    "ipfs-pubsub-room": "^3.0.0",
    "is-svg": "^4.3.2",
    "js-yaml": "^4.1.0",
    "jsdom": "^20.0.1",
    "jsonwebtoken": "^8.5.1",
    "libp2p": "^0.42.2",
    "lodash": "^4.17.21",
    "mime-types": "^2.1.32",
    "node-cache": "^5.1.2",
    "node-forge": "^1.3.0",
    "node-match-path": "^0.6.3",
    "open": "^8.4.0",
    "pino": "^6.13.1",
    "pino-multi-stream": "6.0.0",
    "pino-pretty": "^7.5.1",
    "pino-udp": "^1.0.1",
    "point-contract-manager": "github:pointnetwork/point-contracts#v0.1.0",
    "proper-lockfile": "^4.1.2",
    "query-string": "^7.0.1",
    "readline": "^1.3.0",
    "recursive-copy": "^2.0.14",
    "sequelize": "^6.6.5",
    "sequelize-auto-migrations": "github:scimonster/sequelize-auto-migrations#a063aa6535a3f580623581bf866cef2d609531ba",
    "solc0_8": "npm:solc@^0.8.16",
    "sqlite3": "^5.0.8",
    "tar-fs": "^2.1.1",
    "twig": "^1.15.4",
    "umzug": "^3.0.0",
    "web3": "^1.7.3",
    "web3-provider-engine": "16.0.3",
    "web3-providers-http": "1.6.0"
  },
  "devDependencies": {
    "@babel/cli": "^7.21.5",
    "@babel/core": "^7.21.5",
    "@babel/helper-compilation-targets": "^7.21.5",
    "@babel/plugin-transform-modules-commonjs": "^7.21.5",
    "@babel/preset-env": "^7.16.11",
    "@babel/preset-typescript": "^7.16.7",
    "@ethersproject/providers": "^5.6.4",
    "@types/async": "^3.2.12",
    "@types/cli-progress": "^3.11.0",
    "@types/commander": "^2.12.2",
    "@types/config": "^0.0.41",
    "@types/fs-extra": "^9.0.13",
    "@types/gunzip-maybe": "^1.4.0",
    "@types/jest": "^27.4.1",
    "@types/jsdom": "^20.0.0",
    "@types/jsonwebtoken": "^8.5.9",
    "@types/mime-types": "^2.1.1",
    "@types/node": "^17.0.21",
    "@types/node-forge": "^1.0.2",
    "@types/proper-lockfile": "^4.1.2",
    "@types/sequelize": "^4.28.11",
    "@types/tar-fs": "^2.0.1",
    "@types/umzug": "^2.3.3",
    "@types/ws": "^8.5.3",
    "@typescript-eslint/eslint-plugin": "^5.41.0",
    "@typescript-eslint/parser": "^5.41.0",
    "cross-env": "^7.0.3",
    "eslint": "^8.9.0",
    "eslint-plugin-filenames": "^1.3.2",
    "eslint-plugin-prefer-arrow": "^1.2.3",
    "ethers": "^5.6.4",
    "hardhat": "^2.8.4",
    "http-proxy-agent": "^5.0.0",
    "https-proxy-agent": "^5.0.0",
    "husky": "^8.0.1",
    "jest": "^28.1.2",
    "jest-circus": "^28.1.2",
    "jest-junit": "^14.0.0",
    "lint-staged": "^13.0.3",
    "nodemon": "^2.0.12",
    "pkg": "^5.7.0",
    "sequelize-cli": "^6.2.0",
    "sequelize-mig": "^3.1.3",
    "solhint": "^3.3.7",
    "ts-node": "^10.9.1",
    "typechain": "^8.0.0",
    "typescript": "^4.7.3"
  },
  "scripts": {
    "pretest": "mkdir -p ./tests/resources/datadir/keystore && cp ./resources/blockchain-test-key.json ./tests/resources/datadir/keystore/key.json",
    "pretest:ci": "npm run pretest",
    "test": "npm run build:explorer:dev && POINT_DATADIR=./tests/resources/datadir POINT_KEYSTORE=./tests/resources/datadir/keystore NODE_CONFIG_ENV=test MODE=test jest --forceExit",
    "test:ci": "npm run build:explorer && POINT_DATADIR=./tests/resources/datadir POINT_KEYSTORE=./tests/resources/datadir/keystore MODE=test jest --forceExit --reporters=default --reporters=jest-junit",
    "test:docker": "cross-env MODE=test TESTING_IN_DOCKER=true jest tests/docker/*.spec.js --forceExit --modulePathIgnorePatterns [] --reporters=default --reporters=jest-junit",
    "start": "NODE_CONFIG_ENV=production node dist/index.js",
    "start:zappdev": "cross-env NODE_CONFIG_ENV=zappdev MODE=zappdev npm run watch",
    "start:dev": "cross-env npm run watch",
    "start:e2e": "cross-env NODE_CONFIG_ENV=e2e MODE=e2e npm run watch",
    "watch": "nodemon",
    "build": "tsc",
    "build:explorer": "npm run --prefix ./internal/explorer.point build",
    "build:explorer:dev": "npm run --prefix ./internal/explorer.point --ignore-scripts build",
    "patch": "perl -i -pe\"s|timeout: 20000|timeout: 60000|\" node_modules/@trufflesuite/web3-provider-engine/subproviders/rpc.js",
    "postinstall": "echo '\\nPatching modules...' && npm run patch && echo '...done\\n' && husky install",
    "pkg": "pkg .",
    "prepkg:win": "npm run build:explorer",
    "prepkg:linux": "npm run build:explorer",
    "prepkg:macos": "npm run build:explorer",
    "pkg:win": "pkg --targets node16-win-x64 --output bin/pointnetwork-win .",
    "pkg:linux": "pkg --targets node16-linux-x64 --output bin/pointnetwork-linux .",
    "pkg:macos": "pkg --targets node16-macos-x64 --output bin/pointnetwork-macos .",
    "compile": "./point compile",
    "watch:site": "npx nodemon -w $SITE --config example/nodemon.json",
    "watch:sites": "ls -d example/*/ | xargs -I {} echo \"SITE={} npm run watch:site\" | sed \"s/.*/\\\\'&\\\\'/\" | xargs npx concurrently",
    "watch:sites:and:start": "npm run watch:sites -- 'npm run start' -n \"Pointnetwork,$(ls -d example/*/ | tr '\n' ',')\"",
    "watch:sites:and:start:dev": "npm run watch:sites -- 'npm run start:dev' -n \"Pointnetwork,$(ls -d example/*/ | tr '\n' ',')\"",
    "watch:site:and:start:docker:dev": "npx concurrently -n \"pointnetwork,$SITE\" 'npm run start:dev' 'npm run watch:site'",
    "build:deployer": "source .env.znet && docker build -t pointnetwork/pointnetwork_deployer:$DEPLOYER_IMAGE_VERSION -f deployer.Dockerfile .",
    "push:deployer": "source .env.znet && docker push pointnetwork/pointnetwork_deployer:$DEPLOYER_IMAGE_VERSION",
    "devnet": "sudo docker-compose -f docker-compose.devnet.yaml --env-file .env.deployer.devnet",
    "volume:backup": "docker run --rm -v $(pwd):/backup -v $VOLUME:/data ubuntu tar -czvf /backup/$VOLUME-$(date \"+%Y-%m-%dT%H:%M:%S\").tar.gz /data",
    "volume:restore": "docker run --rm -v $(pwd):/backup -v $VOLUME:/data ubuntu bash -c \"cd /data && tar -xvf /backup/$FILE --strip 1\"",
    "fix": "eslint --ext .js --ext .ts --fix src/ && eslint --ext .js --fix tests/ && eslint --fix point",
    "lint": "eslint --ext .js --ext .ts src/ && eslint --ext .js tests/ && eslint point",
    "lint:sol": "solhint 'example/**/contracts/*.sol' 'hardhat/contracts/*.sol'",
    "slither": "find example -type f -name '*.sol' -exec slither '{}' --solc-remaps @openzeppelin=node_modules/@openzeppelin --config slither.config.json  ';'",
    "generateMigration": "npm run build && npx sequelize-mig migration:make --name ${npm_config_name}  --indexFilePath dist/db/makeMigrationsEntrypoint.js"
  },
  "jest": {
    "verbose": true,
    "moduleNameMapper": {
      "#(.*)": "<rootDir>/core/$1"
    },
    "modulePathIgnorePatterns": [
      "docker",
      "dist"
    ],
    "testEnvironment": "node",
    "testRunner": "jest-circus/runner",
    "globalSetup": "./tests/globalSetup.js"
  },
  "nodemonConfig": {
    "ignore": [
      "example/*"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/pointnetwork/pointnetwork.git"
  },
  "author": "Point Network",
  "license": "MIT",
  "jest-unit": {
    "outputDirectory": ".",
    "outputName": "junit.xml"
  },
  "pkg": {
    "outputPath": "bin",
    "files": [
      "**/*",
      "!src/**/*",
      "!dist/**/*",
      "!example/**/*",
      "!bin/**/*",
      "!_local/**/*",
      "!.parcel-cache/**/*",
      "!here/**/*",
      "!here-local/**/*",
      "!dist_babel/**/*"
    ],
    "assets": [
      "package.json",
      "hardhat/**/*",
      "hardhat/contracts/**/*",
      "config/*.yaml",
      "migrations/**/*",
      "internal/explorer.point/public/**/*",
      "internal/explorer.point/point.deploy.json",
      "resources/certs/*.{crt,key,srl}",
      "resources/app_templates/**/*",
      "node_modules/sqlite3/**/*",
      "node_modules/eccrypto/**/*",
      "node_modules/bigint-buffer/**/*",
      "node_modules/@truffle/hdwallet-provider/**/*",
      "src/client/proxy/views/*",
      "src/abi/**/*",
      "dist/abi/**/*",
      "dist/abi/ERC20.json",
      "src/abi/ERC20.json"
    ],
    "scripts": [
      ".sequelizerc",
      "node_modules/solc*/**/*.js",
      "dist/api/controllers/**/*.js",
      "dist/api/sockets/*.js",
      "migrations/database/*.js"
    ],
    "patches": {
      "./node_modules/undici/lib/fetch/body.js": [
        "require('stream/web')",
        "require('stream').web"
      ],
      "./node_modules/undici/lib/core/util.js": [
        "require('stream/web')",
        "require('stream').web"
      ],
      "./node_modules/undici/lib/fetch/request.js": [
        "require('stream/web')",
        "require('stream').web"
      ],
      "./node_modules/undici/lib/fetch/index.js": [
        "require('stream/web')",
        "require('stream').web"
      ]
    }
  },
  "lint-staged": {
    "*.js": "eslint --fix",
    "*.ts": "eslint --fix"
  }
}
